version: '3'
name: nia-payload
services:
  nianiba-postgres:
    image: "postgres:16.3-alpine"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: nianiba-db
    ports:
      - "5432:5432"
    volumes:
      - nianiba-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nianiba-payload:
#    image: node:18-alpine
    build:
      context: .
      target: runtime
      args:
        - NODE_ENV=${NODE_ENV}
    ports:
      - '3000'
    environment:
      - PAYLOAD_SECRET=${PAYLOAD_SECRET}
      - DATABASE_URI=${DATABASE_URI_DOCKER}
      - NODE_ENV=${NODE_ENV}
#     volumes:
#      - .:/home/node/app
#       - node_modules:/home/node/app/node_modules
    working_dir: /home/node/app/
#     command: sh -c "yarn install --production=false && yarn dev"
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:3000/admin" ]
      interval: 5s
      timeout: 20s
      retries: 10
    depends_on:
      nianiba-db-migration:
        condition: service_completed_successfully
      nianiba-postgres:
        condition: service_healthy


  nianiba-db-migration:
    restart: no
    build:
      context: .
      args:
        - NODE_ENV=${NODE_ENV}
        - SOURCE_COMMIT=${SOURCE_COMMIT}
      target: migration
    environment:
      - DATABASE_URI=${DATABASE_URI_DOCKER}
    env_file:
      - .env
    depends_on:
      nianiba-postgres:
        condition: service_healthy

  nianiba-db-backups:
    image: kartoza/pg-backup:16-3.4
    volumes:
      - nianiba-db-backups:/backups
    environment:
      - DUMPPREFIX=NIANIBA
      - POSTGRES_HOST=nianiba-postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_DBNAME=nianiba-db
      - RUN_AS_ROOT=true
      - STORAGE_BACKEND=S3
      - ACCESS_KEY_ID={{team.S3_ACCESS_KEY}}
      - SECRET_ACCESS_KEY={{team.S3_SECRET_KEY}}
      - DEFAULT_REGION=eu-1
      - BUCKET={{team.S3_BUCKET}}/pg-backup
      - HOST_BASE={{team.S3_ENDPOINT}}
      - HOST_BUCKET={{team.S3_BUCKET}}
      #- CRON_SCHEDULE="*/5 * * * *"
      #- DB_DUMP_ENCRYPTION=true
      # FOR BACKUP FILE RESTORE:
      # TARGET_DB The db name to restore
      # TARGET_ARCHIVE The full path of the archive to restore
      # FOR BACKUP S3 RESTORE
      # $ docker-compose exec dbbackups /backup-scripts/restore.sh 2023-03-24
    restart: on-failure
    env_file:
      - .env
    depends_on:
      nianiba-postgres:
        condition: service_healthy

volumes:
  nianiba-db-backups:
  #external: true
  nianiba-db-data:
  #external: true
    # driver: local
    # driver_opts:
    # type: none
    # device: ${PWD}/data/db
    # o: bind
      # labels:
      #   place.milan.description: "Postgress Database volume"
      #  place.milan.department: "IT/Ops"
    # place.milan.owner: "place.milan.nianiba"
 # node_modules:
